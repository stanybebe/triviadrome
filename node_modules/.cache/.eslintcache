[{"/Users/mac/Documents/GitHub/triviadrome/src/index.js":"1","/Users/mac/Documents/GitHub/triviadrome/src/App.js":"2","/Users/mac/Documents/GitHub/triviadrome/src/reportWebVitals.js":"3","/Users/mac/Documents/GitHub/triviadrome/src/pages/User.jsx":"4","/Users/mac/Documents/GitHub/triviadrome/src/pages/Admin.jsx":"5"},{"size":536,"mtime":1685553103494,"results":"6","hashOfConfig":"7"},{"size":388,"mtime":1685553327851,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1684338628647,"results":"9","hashOfConfig":"7"},{"size":3889,"mtime":1685895746995,"results":"10","hashOfConfig":"7"},{"size":4215,"mtime":1685895737819,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ibua7i",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/mac/Documents/GitHub/triviadrome/src/index.js",[],[],"/Users/mac/Documents/GitHub/triviadrome/src/App.js",[],[],"/Users/mac/Documents/GitHub/triviadrome/src/reportWebVitals.js",[],[],"/Users/mac/Documents/GitHub/triviadrome/src/pages/User.jsx",[],[],"/Users/mac/Documents/GitHub/triviadrome/src/pages/Admin.jsx",["28","29"],[],"import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\n\nfunction Admin() {\n  const [messages, setMessages] = useState([]);\n  const [messagesOut, setMessagesOut] = useState([]);\n  const [allOut, setAllOut] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('');\n  const [joinedUsers, setJoinedUsers] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState('');\n\n  const sockets = io('https://master--brilliant-arithmetic-e7a72c.netlify.app:3001');\n\n\n  useEffect(() => {\n    console.log(allOut);\n    const socket = io('https://master--brilliant-arithmetic-e7a72c.netlify.app:3001');\n    socket.emit('getJoinedUsers');\n    \nsocket.on('joinedUsers', (users) => {\n  const uniqueUsernames = new Set();\n  const filteredUsers = users.filter((user) => {\n    if (!uniqueUsernames.has(user.username) && user.username) {\n      uniqueUsernames.add(user.username);\n      return true;\n    }\n    return false;\n  });\n  setJoinedUsers(filteredUsers);\n});\n\n       socket.on('adminMessage', (data) => {\n      console.log('Received message:', data);\n      const { userId, message } = data;\n      console.log(data);\n      // Check the type of userId and message\n      console.log(typeof data.userId, typeof data.message);\n      // Update the messages state with the new message\n      const newMessageUser = {\n        sender: data.userId,\n        username: data.userId,\n        content: data.message,\n      };\n\n      setMessages((prevMessages) => [...prevMessages, { userId, message }]);\n      setAllOut((prevMessages) => [...prevMessages, newMessageUser]);\n\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const handleUserSelect = (user,userId) => {\n    setSelectedUser(user);\n    setSelectedUserId(userId);\n  };\n\n  const handleMessageChange = (event) => {\n    setMessagesOut(event.target.value);\n  };\n\n    // Handle sending message to the selected user\n    const handleSendMessage = () => {\n  \n      if (selectedUser){\n \n       \n        sockets.emit('adminMessageOut', { id: selectedUserId, username: selectedUser, messagesOut });\n        setMessagesOut('');\n    \n      }\n\n      const newMessageAdmin = {\n        sender: 'Admin',\n        username: selectedUser,\n        content: messagesOut,\n      };\n\n      setAllOut((prevMessages) => [...prevMessages, newMessageAdmin]);\n    };\n\n  return (\n    <div className=\"flex\">\n      <div className=\"w-1/4 bg-gray-200 p-4\">\n        <h3 className=\"text-xl mb-4\">Joined Users</h3>\n        <ul>\n          {joinedUsers.map((user) => (\n            <li\n              key={user.id}\n              className={`cursor-pointer p-2 mb-2 ${\n                user.username === selectedUser ? 'bg-blue-500 text-white' : 'bg-white'\n              }`}\n              onClick={() => handleUserSelect(user.username)}\n            >\n              {user.username}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"flex-1 p-4\">\n        <h3 className=\"text-xl mb-4\">Chat</h3>\n        {selectedUser ? (\n          <div>\n            <h4 className=\"text-lg mb-2\">Selected User: {selectedUser}</h4>\n            <div className=\"bg-white p-4 h-80 overflow-y-auto\">\n\n\n\n     {allOut.map((admes, index) => {\n  if (admes.username === selectedUser) {\n    return (\n      <div key={index} className=\"mb-2\">\n        <strong>{admes.sender} </strong>\n        {admes.content}\n      </div>\n    );\n  }\n  return null; // Add this line to skip rendering admin messages that don't match the selected user\n})}\n\n              \n\n                 \n            </div>\n            <div className=\"mt-4\">\n              <input\n                type=\"text\"\n                value={messagesOut}\n                onChange={handleMessageChange}\n                className=\"p-2 border rounded mr-2\"\n                placeholder=\"Enter your message\"\n              />\n              <button\n                onClick={handleSendMessage}\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n              >\n                Send Message\n              </button>\n            </div>\n          </div>\n        ) : (\n          <p>No user selected.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Admin;",{"ruleId":"30","severity":1,"message":"31","line":5,"column":10,"nodeType":"32","messageId":"33","endLine":5,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":53,"column":6,"nodeType":"36","endLine":53,"endColumn":8,"suggestions":"37"},"no-unused-vars","'messages' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'allOut'. Either include it or remove the dependency array.","ArrayExpression",["38"],{"desc":"39","fix":"40"},"Update the dependencies array to be: [allOut]",{"range":"41","text":"42"},[1670,1672],"[allOut]"]